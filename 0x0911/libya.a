!<arch>
0-isupper.c/    0           0     0     644     206       `
#include "main.h"
/**
* _isupper - checks for uppercase character
* @c: Variable text
* Return: Always 0.
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _memset - fill a block of memory with a specific value
 * @s: starting address of memory to be filled
 * @b: the desired value
 * @n: number of bytes to be changed
 *
 * Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}


0-strcat.c/     0           0     0     644     326       `
#include "main.h"
/**
 * _strcat - concatinate two strings
 * @dest: parameter
 * @src: parameter
 * Return:  0
 */
char *_strcat(char *dest, char *src)
{
	int e;
	int f;

	e = 0;
	while (dest[e] != '\0')
	{
		e++;
	}
	f = 0;
	while (src[f] != '\0')
	{
		dest[e] = src[f];
		e++;
		f++;
	}

	dest[e] = '\0';
	return (dest);
}
1-isdigit.c/    0           0     0     644     192       `
#include "main.h"
/**
* _isdigit - checks for a digit (0 through 9)
* @c: int to be checked
* Return: 1 if c is a digit, 0 otherwise
*/
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     358       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     363       `
#include "main.h"
/**
 * _strncat - concatinating two strings
 * @dest: parameter
 * @src : parameter
 * @n: parameter
 * Return: 0;
 */
char *_strncat(char *dest, char *src, int n)
{
	int e;
	int f;

	e = 0;
	while (dest[e] != '\0')
	{
		e++;
	}
	f = 0;
	while (f < n && src[f] != '\0')
	{
		dest[e] = src[f];
		e++;
		f++;
	}
	dest[e] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     551       `
#include "main.h"
/**
 * _atoi - converting string to int
 * @s: the parameter
 * Return: the value
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';

			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}

2-strchr.c/     0           0     0     644     238       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     242       `
#include "main.h"
#include <string.h>
/**
 * _strlen - prints out the lenght of a string
 * @s: the string with the lenght
 * Return: len
 */
int _strlen(char *s)
{
	int len = 0;

	while (*s != '\0')
	{
		len++;
		s++;
	}



	return (len);
}
2-strncpy.c/    0           0     0     644     323       `
#include "main.h"
/**
 * _strncpy - coppies a string
 * @dest: parameter
 * @src:parameter
 * @n: parameter
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int f;

	f = 0;
	while (f < n && src[f] != '\0')
	{
		dest[f] = src[f];
		f++;
	}
	while (f < n)
	{
		dest[f] = '\0';
		f++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     223       `
#include "main.h"
/**
 * _islower - checks for lowercase.
 * @c: just a charac
 * Return: it depends, it could be 0 or 1
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     171       `
#include "main.h"
/**
 * _puts - prints string followed by a new line, to standard output
 * @s: the parameter.
 */
void _puts(char *s)
{
	_putchar(s);
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     299       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: parameter
 * @s2: parameter
 * Return: both parameter
 */
int _strcmp(char *s1, char *s2)
{
	int e;

	e = 0;

	while (s1[e] != '\0' && s2[e] != '\0')
	{
		if (s1[e] != s2[e])
		{
			return (s1[e] - s2[e]);
		}
		e++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     372       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     262       `
#include "main.h"
/**
 * _isalpha - just to check for alphabets
 * @c: just the parameter of the above function
 * Return: 0 or void
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     291       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
		int k;

		while (*s)
		{
			for (k = 0; accept[k]; k++)
			{
			if (*s == accept[k])
			return (s);
			}
		s++;
		}

	return ('\0');
}


5-strstr.c/     0           0     0     644     368       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}

6-abs.c/        0           0     0     644     238       `
#include "main.h"
/**
 * _abs - Computes the absolute value of an integer
 *
 * @n: The integer to compute the absolute value of
 *
 * Return: The absolute value of n
 */
int _abs(int n)
{
	if (n < 0)
		return (-n);
	else
		return (n);
}
9-strcpy.c/     0           0     0     644     297       `
#include "main.h"
/**
 * _strcpy - copies string
 * @dest: copy to
 * @src: copy from
 * Return: string
 */

char *_strcpy(char *dest, char *src)
{
	int l = 0;
	int x = 0;

	while (*(src + l) != '\0')
	{
		l++;
	}
	for ( ; x < l ; x++)
	{
		dest[x] = src[x];
	}
	dest[l] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     181       `
#include "main.h"
#include <unistd.h>
/**
* _putchar - Entry
* @c: the character to be returned
* Return: character to print
*/
int  _putchar(char c)
{
	return (write(1, &c, 1));
}

